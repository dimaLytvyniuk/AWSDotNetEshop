AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template to create ECS for Awsdotneteshop app'

Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  ECSPublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
  
  ECSPublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""

  ECSPrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""

  ECSPrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.4.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""

  WebAggregatorALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP(S) traffic from anywhere to the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  ECSEshopSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP(S) traffic to ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

  InternalALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP traffic from ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSPublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable
  
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSPublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref ECSPublicSubnet
      AllocationId: !GetAtt NATGatewayEIP.AllocationId

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSPrivateSubnet
      RouteTableId: !Ref PrivateSubnetRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSPrivateSubnet2
      RouteTableId: !Ref PrivateSubnetRouteTable

  WebAggregatorLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/WebAggregator
      RetentionInDays: 7

  CatalogApiLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/CatalogApi
      RetentionInDays: 7

  RabbitMQLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/RabbitMQ
      RetentionInDays: 7

  ECSEshopCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ecs-eshop-cluster

  # RabbitMQInternalALB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: rabbitmq-api-lb
  #     Subnets:
  #       - !Ref ECSPrivateSubnet
  #       - !Ref ECSPrivateSubnet2
  #     SecurityGroups:
  #       - !Ref InternalALBSecurityGroup
  #     Scheme: internal
  #     Type: application

  # RabbitMQTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   DependsOn: RabbitMQInternalALB
  #   Properties:
  #     Name: rabbitmq-targetgroup
  #     Port: 80
  #     HealthCheckPath: /hc
  #     Protocol: HTTP
  #     TargetType: ip
  #     VpcId: !Ref VPC

  # RabbitMQInternalALBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref RabbitMQInternalALB
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: fixed-response
  #         FixedResponseConfig:
  #           StatusCode: 200
  #           ContentType: text/plain
  #           MessageBody: Default fixed response

  # ECSFargateTaskDefinitionRabbitMQ:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     Family: ecs-fargate-task-rabbitmq
  #     NetworkMode: awsvpc
  #     RequiresCompatibilities:
  #       - FARGATE
  #     Cpu: '256'
  #     Memory: '512'
  #     ExecutionRoleArn: !Ref ECSServiceRole
  #     ContainerDefinitions:
  #       - Name: ecs-fargate-container-rabbitmq
  #         Image: 'rabbitmq:3-management-alpine'
  #         Essential: true
  #         Memory: 128
  #         PortMappings:
  #           - ContainerPort: 80
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref RabbitMQLogsGroup
  #             awslogs-region: !Ref "AWS::Region"
  #             awslogs-stream-prefix: RabbitMQ
  
  # ECSFargateServiceRabbitMQ:
  #   Type: AWS::ECS::Service
  #   DependsOn: RabbitMQInternalALBListener
  #   Properties:
  #     ServiceName: ecs-fargate-catalog-rabbitmq
  #     Cluster: !Ref ECSEshopCluster
  #     TaskDefinition: !Ref ECSFargateTaskDefinitionRabbitMQ
  #     DeploymentConfiguration:
  #       MinimumHealthyPercent: 0
  #       MaximumPercent: 100
  #     DesiredCount: 2
  #     LaunchType: FARGATE
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: DISABLED
  #         SecurityGroups:
  #         - !Ref ECSEshopSecurityGroup
  #         Subnets:
  #         - !Ref ECSPrivateSubnet
  #         - !Ref ECSPrivateSubnet2

  CatalogApiInternalALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: catalog-api-lb
      Subnets:
        - !Ref ECSPrivateSubnet
        - !Ref ECSPrivateSubnet2
      SecurityGroups:
        - !Ref InternalALBSecurityGroup
      Scheme: internal
      Type: application

  CatalogApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: CatalogApiInternalALB
    Properties:
      Name: catalog-api-targetgroup
      Port: 80
      HealthCheckPath: /api/v1/catalog/test
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  CatalogApiInternalALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref CatalogApiInternalALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CatalogApiTargetGroup

  ECSFargateTaskDefinitionCatalogApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ecs-fargate-task-catalog-api
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !Ref ECSServiceRole
      ContainerDefinitions:
        - Name: ecs-fargate-container-catalog-api
          Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", "catalog-api:latest"]]
          Essential: true
          Memory: 128
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CatalogApiLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: CatalogApi

  ECSFargateServiceCatalogApi:
      Type: AWS::ECS::Service
      DependsOn: CatalogApiInternalALBListener
      Properties:
        ServiceName: ecs-fargate-catalog-api-service
        Cluster: !Ref ECSEshopCluster
        TaskDefinition: !Ref ECSFargateTaskDefinitionCatalogApi
        LoadBalancers:
        - TargetGroupArn: !Ref CatalogApiTargetGroup
          ContainerName: ecs-fargate-container-catalog-api
          ContainerPort: 80
        DeploymentConfiguration:
          MinimumHealthyPercent: 0
          MaximumPercent: 100
        DesiredCount: 2
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
            - !Ref ECSEshopSecurityGroup
            Subnets:
            - !Ref ECSPrivateSubnet
            - !Ref ECSPrivateSubnet2

  ECSFargateTaskDefinitionWebAggregator:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CatalogApiInternalALB
    Properties:
      Family: ecs-fargate-task-web-aggregator
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !Ref ECSServiceRole
      ContainerDefinitions:
        - Name: ecs-fargate-container-web-aggregator
          Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", "web-aggregator:latest"]]
          Essential: true
          Memory: 128
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebAggregatorLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: WebAggregator
          Environment:
          - Name: ReverseProxy__Clusters__catalog__Destinations__destination0__Address
            Value: !Join ['', ['http://', !GetAtt  CatalogApiInternalALB.DNSName]]
          - Name: urls__catalog
            Value: !Join ['', ['http://', !GetAtt  CatalogApiInternalALB.DNSName]]
          - Name: CatalogUrlHC
            Value: !Join ['', ['http://', !GetAtt  CatalogApiInternalALB.DNSName, '/hc']]

  WebAggregatorALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: webaggregator-alb
      Scheme: internet-facing
      Subnets:
        - !Ref ECSPublicSubnet
        - !Ref ECSPublicSubnet2
      SecurityGroups:
        - !Ref WebAggregatorALBSecurityGroup

  WebAggregatorALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAggregatorALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAggregatorTargetGroup
  
  WebAggregatorTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: WebAggregatorALB
    Properties:
      Name: webaggregator-targetgroup
      Port: 80
      HealthCheckPath: /swagger/index.html
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      
  ECSFargateServiceWebAggregator:
    Type: AWS::ECS::Service
    DependsOn: WebAggregatorALBListener
    Properties:
      ServiceName: ecs-fargate-web-aggregator-service
      Cluster: !Ref ECSEshopCluster
      TaskDefinition: !Ref ECSFargateTaskDefinitionWebAggregator
      LoadBalancers:
        - TargetGroupArn: !Ref WebAggregatorTargetGroup
          ContainerName: ecs-fargate-container-web-aggregator
          ContainerPort: 80
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref ECSEshopSecurityGroup
          Subnets:
          - !Ref ECSPublicSubnet
          - !Ref ECSPublicSubnet2
  
  WebAggregatorProxyResource:
    Type: AWS::ApiGatewayV2::Api
    Properties:
        Name: WebAggregatorApiGateway
        ProtocolType: HTTP

  WebAggregatorRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebAggregatorProxyResource
      RouteKey: ANY /{proxy+}
      Target: !Sub integrations/${WebAggregatorHttpProxyIntegration}

  WebAggregatorHttpProxyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebAggregatorProxyResource
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Join ['', ['http://', !GetAtt  WebAggregatorALB.DNSName, '/{proxy}']]
      PayloadFormatVersion: 1.0
      ConnectionType: INTERNET

  WebAggregatorDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WebAggregatorProxyResource
    DependsOn:
      - WebAggregatorRoute

  WebServiceStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebAggregatorProxyResource
      DeploymentId: !Ref WebAggregatorDeployment
      StageName: DEV